# a)_1 HORNER.PY

# Método simple

import math
import numpy as np
def poly_naive(A, x):
    p = 0
    for i, a in enumerate(A):
        p += (x ** i) * a
    return p
print(poly_naive((2,4),1))

-------------------------------------------------------------------

# a)_2 HORNER.PY

# Método iterativo

import math
import numpy as np
def poly_iter(A, x):
    p = 0
    xn = 1
    for a in A:
        p += xn * a
        xn *= x
    return p
print(poly_naive((2,4),1))

-------------------------------------------------------------------

# a)_3 HORNER.PY

# Regla de Horner

import math
import numpy as np

def poly_horner(A, x):
    p = A[-1]
    i = len(A) - 2
    while i >= 0:
        p = p * x + A[i]
        i -= 1
    return p
print(poly_naive((2,4),1))

#En los tres casos sólo arroja números en vez de ecuaciones

-------------------------------------------------------------------
# b) EVALUACIÓN DEL COSENO

import math
import numpy as np
import pandas as pd

# Definir los valores de x
valores_x = [0, 0.125, 0.25, 0.5, 0.75, 1, 100]

# Calcular y(x) = cos(x) para cada valor

valores_y = [np.cos(x) for x in valores_x]

# Calcular cos(x) en serie de potencias

valores_f = [(1 + x + (x**2) / math.factorial(2) + (x**3) / math.factorial(3)) for x in valores_x]

# Función para calcular el error relativo
def calcular_error_relativo(valores_f, valores_y):
    errores_relativos = []
    for real, aproximado in zip(valores_f, valores_y):
        error = abs(real - aproximado) / abs(real)
        errores_relativos.append(error)
    return errores_relativos

# Calcular errores relativos
errores = calcular_error_relativo(valores_f, valores_y)

# Crear un DataFrame para mostrar la tabla
tabla = pd.DataFrame({
    'x': valores_x,
    'Coseno en serie': valores_f,
    'Coseno': valores_y,
    'Error': errores
})

# Mostrar la tabla
print(tabla)

-------------------------------------------------------------------

# c)_1 DATOS DE ESTRELLAS CON HRDIAGRAM.PY

# Usando el programa hrdiagram.py y los datos de stars.dat, reproducir la gráfica

#!/usr/bin/env python
from __future__ import print_function,division
### http://www-personal.umich.edu/~mejn/computational-physics/

from pylab import scatter,xlabel,ylabel,xlim,ylim,show
from numpy import loadtxt

data = loadtxt("stars.dat",float)
x = data[:,0]
y = data[:,1]

scatter(x,y)
xlabel("Temperature")
ylabel("Magnitude")
xlim(0,13000)
ylim(-5,20)
show()

-------------------------------------------------------------------

# c)_2 DATOS DE ESTRELLAS SIN HRDIAGRAM.PY

import matplotlib.pyplot as plt
import numpy as np

# En la línea de código abajo: "ruta del archivo", skiprow para el orden de los datos con salto de 1, usecols para columnas y unpack=True para leer los datos

x, y = np.loadtxt("/content/drive/MyDrive/SSF_2024/Stars.txt", skiprows=1, usecols=[0,1], unpack = True)
print(x, y)
plt.plot(x, y)
plt.show()

-------------------------------------------------------------------

# d) GRÁFICA DE ALTURAS

import matplotlib.pyplot as plt
import numpy as np

# Lista de datos cargada en drive 
x, y = np.loadtxt("/content/drive/MyDrive/SSF_2024/A.txt", skiprows=1, usecols=[0,1], unpack = True)
print(x, y)
plt.plot(x, y)
plt.show()

#NOTA: La lista B no puedo graficarla hasta el momento
