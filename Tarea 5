#Ejercicio 1

from pylab import *

# Define the euler function
def euler(state, time, dt, derivative):
  "This is the Euler method"
  return state + dt*derivative(state,time)

N = 1000
xo = 0.0
vo = 0.0
tau = 3.0
dt = tau/float(N-1)
k = 3.5
m = 0.2
gravity = 9.8
y = [[0] * 2 for _ in range(N)]
y[0][0]=xo
y[0][1]=vo # Use y[0][1] to access the second element of the first list

time = [i*dt for i in range(N)] # Create the time array

def SHO(state,time):
  g0 = state[1]
  g1 = -k/m*state[0]-gravity
  return array([g0,g1])
for j in range(N-1):
  y[j+1]=euler(y[j],time[j],dt,SHO)
xdata=[y[j][0] for j in range(N)] # Use y[j][0] to access the first element of the j-th list in y
vdata = [y[j][1] for j in range(N)] # Use y[j][1] to access the second element of the j-th list in y
import matplotlib.pyplot as plt

plt.plot(time,xdata)
plt.plot(time,vdata)
plt.xlabel("time")
plt.ylabel("position,velocity")
plt.show()

#---------------------------------------------------------------------------------------------------------

import numpy as np
import pandas as pd

# Definimos la función g(y, t)
def g(y, t):
    return -y + np.sin(t) # Ejemplo de función, puedes cambiarla según tus necesidades

# Método de Runge-Kutta de segundo orden
def runge_kutta_2nd_order(y0, t0, delta_t, k, num_steps):
    y_values = [y0]
    t_values = [t0]

    for _ in range(num_steps):
        t = t_values[-1]
        y = y_values[-1]

        K1 = g(y, t)
        K2 = g(y + 0.5 * delta_t * K1, t + 0.5 * delta_t)

        y_next = y + delta_t * K2
        t_next = t + delta_t

        y_values.append(y_next)
        t_values.append(t_next)

    return y_values

# Parámetros
y0 = 0 # Valor inicial de y
t0 = 0 # Valor inicial de t
delta_t = 0.1 # Paso de tiempo
num_steps = 10 # Número de pasos

# Grupos de valores de k
k_values = [
    (0.5, 1, 3),
    (5, 7.5, 10),
    (60, 90, 120)
]

# Almacenamos los resultados
results = []

for k_group in k_values:
    for k in k_group:
        y_values = runge_kutta_2nd_order(y0, t0, delta_t, k, num_steps)
        results.append({'k': k, 'y_values': y_values})

# Crear un DataFrame para mostrar los resultados
df = pd.DataFrame(results)

# Mostrar la tabla comparativa
print(df)

#---------------------------------------------------------------------------------------------------------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Parámetros del péndulo
g = 9.81 # Aceleración debida a la gravedad (m/s^2)
L = 1.0 # Longitud del péndulo (m)
b = 0.5 # Coeficiente de amortiguamiento
m = 1.0 # Masa del péndulo (kg)
omega = 1.0 # Frecuencia de la fuerza externa

# Definimos la función que describe el sistema
def pendulum_derivatives(state, t, k):
    theta, omega = state #This line and the following need to be indented
    dtheta_dt = omega
    domega_dt = (-b/m) * omega - (g/L) * np.sin(theta) + k * np.cos(omega * t)
    return np.array([dtheta_dt, domega_dt])

# Método de Runge-Kutta de segundo orden
def runge_kutta_2nd_order(state0, t0, delta_t, k, num_steps):
    states = [state0]
    t_values = [t0]

    for _ in range(num_steps):
        t = t_values[-1]
        # Estado actual
        state = states[-1]

        # Derivadas
        K1 = pendulum_derivatives(state, t, k)
        K2 = pendulum_derivatives(state + 0.5 * delta_t * K1, t + 0.5 * delta_t, k)

        # Actualización del estado
        state_next = state + delta_t * K2
        states.append(state_next)
        t_values.append(t + delta_t)

    return np.array(states)

# Parámetros iniciales
theta0 = np.pi / 4  # Ángulo inicial (radianes)
omega0 = 0.0        # Velocidad angular inicial
state0 = np.array([theta0, omega0])  # Estado inicial
t0 = 0.0            # Tiempo inicial
delta_t = 0.1       # Paso de tiempo
num_steps = 100     # Número de pasos

# Grupos de valores de k
k_values = [
    (0.5, 1, 3),
    (5, 7.5, 10),
    (15, 20, 30)
]

# Almacenamos los resultados
results = []

for k_group in k_values:
    for k in k_group:
        states = runge_kutta_2nd_order(state0, t0, delta_t, k, num_steps)
        results.append({'k': k, 'theta': states[:, 0], 'omega': states[:, 1]})

# Crear un DataFrame para mostrar los resultados
df = pd.DataFrame(results)

# Mostrar la tabla comparativa
print(df)
