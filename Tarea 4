import numpy as np
import matplotlib.pyplot as plt

# Definimos los parámetros
omega = 1.0  # Frecuencia del oscilador
k = 1.0      # Constante de no linealidad
t_max = 10.0 # Tiempo máximo de simulación
dt = 0.01    # Paso de tiempo

# Inicializamos las condiciones iniciales
x0 = 1.0     # Posición inicial
v0 = 0.0     # Velocidad inicial

# Creamos un array de tiempo
t = np.arange(0, t_max, dt)

# Inicializamos arrays para posición y velocidad
x = np.zeros(len(t))
v = np.zeros(len(t))

# Condiciones iniciales
x[0] = x0
v[0] = v0

# Definimos la función del sistema
def derivatives(x, v):
    dxdt = v
    dvdt = -omega**2 * x - k * x**3
    return dxdt, dvdt

# Método de Runge-Kutta de cuarto orden
for i in range(len(t) - 1):
    k1x, k1v = derivatives(x[i], v[i])
    k2x, k2v = derivatives(x[i] + 0.5 * dt * k1x, v[i] + 0.5 * dt * k1v)
    k3x, k3v = derivatives(x[i] + 0.5 * dt * k2x, v[i] + 0.5 * dt * k2v)
    k4x, k4v = derivatives(x[i] + dt * k3x, v[i] + dt * k3v)
    
    x[i + 1] = x[i] + (dt / 6) * (k1x + 2 * k2x + 2 * k3x + k4x)
    v[i + 1] = v[i] + (dt / 6) * (k1v + 2 * k2v + 2 * k3v + k4v)

# Graficamos los resultados
plt.figure(figsize=(10, 5))
plt.plot(t, x, label='Posición (x)')
plt.plot(t, v, label='Velocidad (v)')
plt.title('Oscilador Armónico No Lineal')
plt.xlabel('Tiempo')
plt.ylabel('Amplitud')
plt.legend()
plt.grid()
plt.show()

-----------------------------------------------------

%matplotlib inline                      
import numpy as np
import matplotlib.pyplot as plt

def harmonic_eq(x,t,k):
    return x[1], - k*x[0]

def euler_2var(x, func, t, k, dt):
    y = func(x,t,k)
    return x[0] + dt*y[0], x[1]+ dt*y[1]

def calc_plot2var(method, equation, k, dt, n_steps):
    t = np.arange(0, n_steps*dt, dt) 
    x = np.zeros((n_steps,2))               # n_step
    x[0][0] = 2.0                           # initial position
    for i in range(n_steps-1):  
        x[i+1] = method(x[i],harmonic_eq, t[i], k, dt)
    
    fig = plt.figure(figsize=(12,5))
    axes = fig.add_subplot(1,2,1)
    axes.plot(t, x[:,0], 'r', label="$x(t)$")
    axes.plot(t, x[:,1], 'b', label="$v(t)$")
    axes.set_xlabel("$t$")
    
    plt.legend(loc='upper left')
    
    #plot a trajectory
    axes = fig.add_subplot(1,2,2)
    axes.plot(x[:,0], x[:,1],'#ff8800')
    axes.set_xlabel("$x(t)$")
    axes.set_ylabel("$y(t)$")
    plt.show()

if __name__ == "__main__" :
    dt = 0.01
    n_steps = 1000
    k = 200
    calc_plot2var(euler_2var, harmonic_eq, k, dt, n_steps)
